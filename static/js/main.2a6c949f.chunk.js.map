{"version":3,"sources":["components/Home.js","RootReducer.js","store.js","serviceWorker.js","index.js","App.js"],"names":["Home","react_default","a","createElement","className","RootReducer","history","combineReducers","router","connectRouter","rootSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHashHistory","regenerator_default","wrap","_context","prev","next","all","stop","_marked","Boolean","location","hostname","match","storeConfig","store","createStore","createRootReducer","applyMiddleware","routerMiddleware","run","ReactDOM","render","es","esm","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAEO,SAASA,IACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oEACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,+BACAH,EAAAC,EAAAC,cAAA,wFCJDE,EAAA,SAACC,GAAD,OACXC,YAAgB,CACRC,OAAQC,YAAcH,yCCQxBI,GANJC,EAAiBC,cAEjBC,EAAmBC,OAAOC,sCAAwCC,IAE3DV,EAAUW,cAEvB,SAAUP,IAAV,OAAAQ,EAAAhB,EAAAiB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACI,OADJF,EAAAE,KAAA,EACUC,YAAI,IADd,wBAAAH,EAAAI,SAAAC,GCDoBC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,uECVAC,EFSS,WACX,IAAMC,EAAQC,YACVC,EAAkB3B,GAClBO,EACIqB,YACIC,YAAiB7B,GACjBK,KAMZ,OAFAA,EAAeyB,IAAI1B,GAEZqB,EErBSA,GAEpBM,IAASC,OACLrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUR,MAAOD,GACb7B,EAAAC,EAAAC,cCNO,WACX,OACIF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAiBlC,QAASA,GACtBL,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,MDGrC,OAGJ6C,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a6c949f.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Home() {\n    return (\n        <div className=\"uk-height-viewport uk-background-default uk-margin-medium-bottom\">\n            <div className=\"uk-container uk-text-center@m\">\n                <h1 className=\"uk-heading-divider uk-margin-top\">Welcome to Mels Belly Eats!</h1>\n                <p>This website is under construction...</p>\n            </div>\n        </div>\n    );\n}","import {combineReducers} from 'redux';\nimport {connectRouter} from 'connected-react-router';\n\nexport default (history) =>\n    combineReducers({\n            router: connectRouter(history)\n        }\n    );\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport {createHashHistory} from 'history';\nimport createRootReducer from './RootReducer';\nimport {routerMiddleware} from \"connected-react-router\";\nimport createSagaMiddleware from 'redux-saga';\nimport {all} from 'redux-saga/effects';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const history = createHashHistory();\n\nfunction* rootSaga() {\n    yield all([]);\n}\n\nexport default function store() {\n    const store = createStore(\n        createRootReducer(history),\n        composeEnhancers(\n            applyMiddleware(\n                routerMiddleware(history),\n                sagaMiddleware\n            ))\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nconst storeConfig = store();\n\nReactDOM.render(\n    <Provider store={storeConfig}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {Route} from \"react-router-dom\";\nimport {ConnectedRouter} from \"connected-react-router\";\nimport {Home} from \"./components/Home\";\nimport {history} from \"./store\";\n\nexport default function App() {\n    return (\n        <ConnectedRouter history={history}>\n            <Route exact path=\"/\" component={Home}/>\n        </ConnectedRouter>\n    );\n};\n"],"sourceRoot":""}